/******************************************************************************
 * This file was generated by langium-cli 0.4.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, isAstNode, TypeMetaData } from 'langium';

export interface Bind extends Binds {
    readonly $container: Binds | Model;
    field: string
    id: number
}

export const Bind = 'Bind';

export function isBind(item: unknown): item is Bind {
    return reflection.isInstance(item, Bind);
}

export interface Binds extends AstNode {
    readonly $container: Binds | Model;
    fields: Array<Bind>
}

export const Binds = 'Binds';

export function isBinds(item: unknown): item is Binds {
    return reflection.isInstance(item, Binds);
}

export interface Model extends AstNode {
    binds: Array<Binds>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface SignedNat extends AstNode {
    sign: boolean
    val: number
}

export const SignedNat = 'SignedNat';

export function isSignedNat(item: unknown): item is SignedNat {
    return reflection.isInstance(item, SignedNat);
}

export type CustomPredicateAstType = 'Bind' | 'Binds' | 'Model' | 'SignedNat';

export type CustomPredicateAstReference = never;

export class CustomPredicateAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Bind', 'Binds', 'Model', 'SignedNat'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case Bind: {
                return this.isSubtype(Binds, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: CustomPredicateAstReference): string {
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Bind': {
                return {
                    name: 'Bind',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Binds': {
                return {
                    name: 'Binds',
                    mandatory: [
                        { name: 'fields', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'binds', type: 'array' }
                    ]
                };
            }
            case 'SignedNat': {
                return {
                    name: 'SignedNat',
                    mandatory: [
                        { name: 'sign', type: 'boolean' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new CustomPredicateAstReflection();
